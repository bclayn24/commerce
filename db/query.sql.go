// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addToWatchlist = `-- name: AddToWatchlist :exec
INSERT INTO watchlist (
  user_id, listing_id
) VALUES (
  ?, ?
)
`

type AddToWatchlistParams struct {
	UserID    int64
	ListingID int64
}

func (q *Queries) AddToWatchlist(ctx context.Context, arg AddToWatchlistParams) error {
	_, err := q.db.ExecContext(ctx, addToWatchlist, arg.UserID, arg.ListingID)
	return err
}

const closeListing = `-- name: CloseListing :exec
UPDATE listings
SET active = FALSE
WHERE id = ?
`

func (q *Queries) CloseListing(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, closeListing, id)
	return err
}

const createBid = `-- name: CreateBid :exec
INSERT INTO bids (
  amount, user_id, listing_id, owner_name
) VALUES (
  ?, ?, ?, ?
)
`

type CreateBidParams struct {
	Amount    float64
	UserID    int64
	ListingID int64
	OwnerName string
}

func (q *Queries) CreateBid(ctx context.Context, arg CreateBidParams) error {
	_, err := q.db.ExecContext(ctx, createBid,
		arg.Amount,
		arg.UserID,
		arg.ListingID,
		arg.OwnerName,
	)
	return err
}

const createComment = `-- name: CreateComment :exec
INSERT INTO comments (
  comment, listing_id, owner_id, owner_name
) VALUES ( 
?, ?, ?, ? 
)
`

type CreateCommentParams struct {
	Comment   string
	ListingID int64
	OwnerID   int64
	OwnerName string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) error {
	_, err := q.db.ExecContext(ctx, createComment,
		arg.Comment,
		arg.ListingID,
		arg.OwnerID,
		arg.OwnerName,
	)
	return err
}

const createListing = `-- name: CreateListing :exec
INSERT INTO listings (
  title, starting_price, description, owner_id, image_url, created_at, category_id
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
`

type CreateListingParams struct {
	Title         string
	StartingPrice float64
	Description   sql.NullString
	OwnerID       int64
	ImageUrl      string
	CreatedAt     sql.NullTime
	CategoryID    sql.NullInt64
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) error {
	_, err := q.db.ExecContext(ctx, createListing,
		arg.Title,
		arg.StartingPrice,
		arg.Description,
		arg.OwnerID,
		arg.ImageUrl,
		arg.CreatedAt,
		arg.CategoryID,
	)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (
  user_id, token, expires_at
) VALUES (
  ?, ?, ?
)
`

type CreateSessionParams struct {
	UserID    int64
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.UserID, arg.Token, arg.ExpiresAt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password
) VALUES (
  ?, ?
)
RETURNING id
`

type CreateUserParams struct {
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const editListing = `-- name: EditListing :exec
UPDATE listings 
SET 
    title=?,            
    starting_price=?,  
    description=?,      
    image_url=?,        
    category_id=?,
    created_at=?      
WHERE 
    id=?
`

type EditListingParams struct {
	Title         string
	StartingPrice float64
	Description   sql.NullString
	ImageUrl      string
	CategoryID    sql.NullInt64
	CreatedAt     sql.NullTime
	ID            int64
}

func (q *Queries) EditListing(ctx context.Context, arg EditListingParams) error {
	_, err := q.db.ExecContext(ctx, editListing,
		arg.Title,
		arg.StartingPrice,
		arg.Description,
		arg.ImageUrl,
		arg.CategoryID,
		arg.CreatedAt,
		arg.ID,
	)
	return err
}

const getBidsByListingId = `-- name: GetBidsByListingId :many
SELECT id, amount, user_id, listing_id, owner_name, created_at FROM bids
WHERE listing_id = ?
`

func (q *Queries) GetBidsByListingId(ctx context.Context, listingID int64) ([]Bid, error) {
	rows, err := q.db.QueryContext(ctx, getBidsByListingId, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bid
	for rows.Next() {
		var i Bid
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.UserID,
			&i.ListingID,
			&i.OwnerName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategories = `-- name: GetCategories :many
SELECT id, title FROM categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, title FROM categories
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCategoryById(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getCommentsByListingId = `-- name: GetCommentsByListingId :many
SELECT id, listing_id, owner_id, owner_name, comment, created_at FROM comments
WHERE listing_id = ?
ORDER BY id DESC
`

func (q *Queries) GetCommentsByListingId(ctx context.Context, listingID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByListingId, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.OwnerID,
			&i.OwnerName,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListing = `-- name: GetListing :one
SELECT id, title, starting_price, description, image_url, active, created_at, owner_id, category_id FROM listings WHERE id = ? LIMIT 1
`

func (q *Queries) GetListing(ctx context.Context, id int64) (Listing, error) {
	row := q.db.QueryRowContext(ctx, getListing, id)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartingPrice,
		&i.Description,
		&i.ImageUrl,
		&i.Active,
		&i.CreatedAt,
		&i.OwnerID,
		&i.CategoryID,
	)
	return i, err
}

const getListings = `-- name: GetListings :many
SELECT id, title, starting_price, description, image_url, active, created_at, owner_id, category_id FROM listings WHERE active = TRUE
`

func (q *Queries) GetListings(ctx context.Context) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getListings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartingPrice,
			&i.Description,
			&i.ImageUrl,
			&i.Active,
			&i.CreatedAt,
			&i.OwnerID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingsByCategoryId = `-- name: GetListingsByCategoryId :many
SELECT id, title, starting_price, description, image_url, active, created_at, owner_id, category_id FROM listings
WHERE category_id = ?
`

func (q *Queries) GetListingsByCategoryId(ctx context.Context, categoryID sql.NullInt64) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getListingsByCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartingPrice,
			&i.Description,
			&i.ImageUrl,
			&i.Active,
			&i.CreatedAt,
			&i.OwnerID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingsByOwnerId = `-- name: GetListingsByOwnerId :many
SELECT id, title, starting_price, description, image_url, active, created_at, owner_id, category_id FROM listings
WHERE owner_id = ?
`

func (q *Queries) GetListingsByOwnerId(ctx context.Context, ownerID int64) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getListingsByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartingPrice,
			&i.Description,
			&i.ImageUrl,
			&i.Active,
			&i.CreatedAt,
			&i.OwnerID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxBid = `-- name: GetMaxBid :one
SELECT id, amount, user_id, listing_id, owner_name, created_at FROM bids
WHERE listing_id = ?
ORDER BY amount DESC
LIMIT 1
`

func (q *Queries) GetMaxBid(ctx context.Context, listingID int64) (Bid, error) {
	row := q.db.QueryRowContext(ctx, getMaxBid, listingID)
	var i Bid
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.UserID,
		&i.ListingID,
		&i.OwnerName,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, expires_at, created_at FROM sessions
WHERE token = ? LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserWatchlist = `-- name: GetUserWatchlist :many
SELECT listings.id, listings.title, listings.starting_price, listings.description, listings.image_url, listings.active, listings.created_at, listings.owner_id, listings.category_id FROM listings
INNER JOIN watchlist ON listings.id = watchlist.listing_id
WHERE watchlist.user_id = ?
`

func (q *Queries) GetUserWatchlist(ctx context.Context, userID int64) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getUserWatchlist, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartingPrice,
			&i.Description,
			&i.ImageUrl,
			&i.Active,
			&i.CreatedAt,
			&i.OwnerID,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT username FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isInWatchlist = `-- name: IsInWatchlist :one
SELECT user_id, listing_id, created_at FROM watchlist
WHERE user_id = ? AND listing_id = ? LIMIT 1
`

type IsInWatchlistParams struct {
	UserID    int64
	ListingID int64
}

func (q *Queries) IsInWatchlist(ctx context.Context, arg IsInWatchlistParams) (Watchlist, error) {
	row := q.db.QueryRowContext(ctx, isInWatchlist, arg.UserID, arg.ListingID)
	var i Watchlist
	err := row.Scan(&i.UserID, &i.ListingID, &i.CreatedAt)
	return i, err
}

const removeFromWatchlist = `-- name: RemoveFromWatchlist :exec
DELETE FROM watchlist
WHERE user_id = ? AND listing_id = ?
`

type RemoveFromWatchlistParams struct {
	UserID    int64
	ListingID int64
}

func (q *Queries) RemoveFromWatchlist(ctx context.Context, arg RemoveFromWatchlistParams) error {
	_, err := q.db.ExecContext(ctx, removeFromWatchlist, arg.UserID, arg.ListingID)
	return err
}
